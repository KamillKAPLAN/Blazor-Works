@page "/plans"
@page "/plans/{pageNumber:int}"

@inject PlansService plansService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (string.IsNullOrWhiteSpace(Query))
{
    <h2>My Plans - Page: @PageNumber</h2>
}
else
{
    <h2>My Plans - Results for '@Query' - Page: @PageNumber</h2>
}

@if (isBusy)
{
    <h2>Loading...</h2>
}
else
{
    <div class="row">
        <RadzenTextBox Placeholder="Search Query" @bind-Value="Query" /><RadzenButton Text="Search" Click="async () => await getPlansAsync()" />
    </div>
    <hr />

    <div class="row">

        @foreach (var plan in plans)
        {
            <div class="col-4">
                <RadzenCard Style="margin:10px">
                    <img src="@plan.CoverPath" style="width:90%;margin:5px" />
                    <a href='/plans/details/@plan.Id'>@plan.Title</a>
                    <p>@plan.Description</p>
                    <hr />
                    <div class="row">
                        <div class="col-6">
                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Text="Edit"
                                          Click='() => navigationManager.NavigateTo($"/plans/details/{plan.Id}")'
                                          class="btn-block" />
                        </div>
                        <div class="col-6">
                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" class="btn-block"
                                          Click="() => selectPlan(plan.Id)" />
                        </div>
                    </div>
                    @if (selectedPlanId == plan.Id)
                    {
                        <div class="row">
                            <div class="col-12">
                                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="Confirm" class="btn-block"
                                              Click="async () => await deletePlanAsync()" Style="margin:5px;"/>
                            </div>
                        </div>
                    }

                </RadzenCard>
            </div>
        }


    </div>
    <hr />

    <div class="row">
        @for (int i = 1; i <= totalPages; i++)
        {
            int page = i;
            @if (page == PageNumber)
            {
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Disabled="true" Style="margin:8px;" />
            }
            else
            {
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Style="margin:8px;" />
            }

        }

    </div>
}

@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool isBusy = false;
    List<Plan> plans = new List<Plan>();

    int totalPages = 1;


    async Task getPlansAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        plansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        if (PageNumber == null)
            PageNumber = 1;

        PlansCollectionPagingResponse result;

        if (string.IsNullOrWhiteSpace(Query))
            result = await plansService.GetAllPlansByPageAsync(PageNumber.Value);
        else
            result = await plansService.SearchPlansByPageAsync(Query, PageNumber.Value);

        // 50 plans | page size = 10 => 5 pages
        // 54 plans | page size = 10 => 5 pages -> page = 4 plans
        if (result.Count % result.PageSize == 0)
            totalPages = result.Count / result.PageSize;
        else
            totalPages = (result.Count / result.PageSize) + 1;

        plans = result.Records.ToList();

        isBusy = false;
    }

    async Task moveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await getPlansAsync();
    }

    string selectedPlanId = string.Empty;

    void selectPlan(string id)
    {
        selectedPlanId = id;
    }

    async Task deletePlanAsync()
    {
        isBusy = true;

        var result = await plansService.DeletePlanAsync(selectedPlanId);
        if(result.IsSuccess)
        {
            var deletedPlan = plans.SingleOrDefault(p => p.Id == selectedPlanId);
            plans.Remove(deletedPlan);
        }
        else
        {
            await getPlansAsync();
        }

        isBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await getPlansAsync();
    }

}
