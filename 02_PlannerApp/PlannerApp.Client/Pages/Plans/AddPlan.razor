@page "/plans/addplan"

@inject PlansService plansService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager

@attribute [Authorize]

<h3>Add a new Plan</h3>

<div class="row">
    <div class="col-6">
        <EditForm Model="model">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <RadzenTextBox Placeholder="Title" Style="margin: 10px" />
                <Radzen.Blazor.RadzenTextArea Placeholder="Description" Style="margin: 10px; resize: none" />
                <input type="file" Style="margin: 10px" @ref="inputReference" @onchange="async () => await chooseFileAsync()" />
                <img style="width: 100%; margin: 10px" src="@imageContent" />
                <hr />
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Style="margin: 5px" class="btn btn-block" Text="Insert" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;

    string imageContent = string.Empty;
    string fileName = string.Empty;

    ElementReference inputReference;

    // Alert
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task chooseFileAsync()
    {
        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();
        string extension = System.IO.Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

        if (!allowedExtensions.Contains(extension))
        {
            // This file isinvalid
            message = "The chosen file is not a valid image file";
            messageType = Models.AlertMessageType.Error;
            return;
        }
        message = null;

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }
}
