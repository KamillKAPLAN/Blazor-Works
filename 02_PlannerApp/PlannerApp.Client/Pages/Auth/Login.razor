@page "/auth/login"

@using PlannerApp.Shared.Models
@using PlannerApp.Client.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider

@layout AuthLayout

<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="@loginRequest" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />

                <DataAnnotationsValidator />
                @*<ValidationSummary />*@

                <label>Email</label>
                <RadzenTextBox @bind-Value="loginRequest.Email"></RadzenTextBox>
                <ValidationMessage For="@(()=>loginRequest.Email)" />

                <label>Password</label>
                <RadzenPassword @bind-Value="loginRequest.Password"></RadzenPassword>
                <ValidationMessage For="@(()=>loginRequest.Password)" />

                <hr />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister" />
            </RadzenCard>
        </EditForm>
    </div>
</div>


@code {
    LoginRequest loginRequest = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;

    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(loginRequest);

        if (result.IsSuccess)
        {
            var userInfo = new LocalUserInfo()
            {
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Errors.FirstOrDefault() ?? result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
